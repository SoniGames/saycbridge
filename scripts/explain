#!/usr/bin/env python
# Copyright (c) 2013 The SAYCBridge Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from __future__ import print_function
import logging
import sys
import find_src

from core.callhistory import CallHistory
from core.hand import Hand
from core.call import Call
from z3b.bidder import Interpreter
from core.suit import *
from z3b.prettymodel import hand_from_model, pretty_print_model
from tests.harness import expectation_line

import z3


_log = logging.getLogger(__name__)


def configure_logging(is_verbose):
    handler = logging.StreamHandler(sys.stderr)
    formatter = logging.Formatter("%(levelname)-8s: %(message)s")
    handler.setFormatter(formatter)

    logger = logging.getLogger()
    logger.addHandler(handler)
    if is_verbose:
        logger.setLevel(logging.NOTSET)


def _print_usage_and_exit():
    print("USAGE: explain HISTORY")
    print(" HISTORY is space or comma separated")
    print()
    sys.exit(1)

if __name__ == '__main__':
    # Logging is a big hack.
    args = sys.argv[1:]
    is_verbose = '-v' in args
    if is_verbose:
        args.remove('-v')
    configure_logging(is_verbose)

    if not args:
        _print_usage_and_exit()

    history_string = " ".join(args)
    call_history = CallHistory.from_string(history_string)
    interpreter = Interpreter()
    history = interpreter.create_history(call_history, explain=True)
    print()
    print("Points: %s-%s" % (history.rho.min_points, history.rho.max_points))
    for suit in SUITS:
        print("%s: %s-%s" % (suit.name, history.rho.min_length(suit), history.rho.max_length(suit)))
    if history._solver().check() == z3.sat:
        model = history._solver().model()
        pretty_print_model(model)
        print(expectation_line(hand_from_model(model), call_history))
