#!/usr/bin/env python
# Copyright (c) 2013 The SAYCBridge Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from __future__ import print_function
import logging
import sys
import find_src

from core.callhistory import CallHistory
from core.hand import Hand
from core.call import Call
from factory import BidderFactory


_log = logging.getLogger(__name__)


def configure_logging(is_verbose):
    handler = logging.StreamHandler(sys.stderr)
    formatter = logging.Formatter("%(levelname)-8s: %(message)s")
    handler.setFormatter(formatter)

    logger = logging.getLogger()
    logger.addHandler(handler)
    if is_verbose:
        logger.setLevel(logging.NOTSET)


def _print_usage_and_exit():
    print("USAGE: test-hand [EXPECTED_CALL] HAND [HISTORY]")
    print(" EXPECTED_CALL enables debug logging")
    print(" HAND is either C.D.H.S")
    print(" HISTORY is space or comma separated")
    print()
    sys.exit(1)

if __name__ == '__main__':
    # Logging is a big hack.
    args = sys.argv[1:]
    is_verbose = '-v' in args
    if is_verbose:
        args.remove('-v')
    configure_logging(is_verbose)

    args = BidderFactory.configure_from_args(args)
    bidder = BidderFactory.default_bidder()

    if not args:
        _print_usage_and_exit()

    first_arg = args.pop(0)
    if '.' in first_arg:
        expected_call_name = None
        hand_string = first_arg
    elif args:
        expected_call_name = first_arg
        hand_string = args.pop(0)
    else:
        _print_usage_and_exit()

    history_string = " ".join(args) if args else ""
    hand = Hand.from_cdhs_string(hand_string)
    print(hand.pretty_one_line())
    call_history = CallHistory.from_string(history_string)
    expected_call = Call.from_string(expected_call_name) if expected_call_name else None
    print(bidder.find_call_for(hand, call_history, expected_call))
